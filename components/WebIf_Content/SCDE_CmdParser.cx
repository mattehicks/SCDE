//#################################################################################################
//###  Function: CGI for SwITCH Fearure
//###  ESP 8266EX SOC Activities ...
//###  (C) EcSUHA
//###  Maik Schulze, Sandfuhren 4, 38448 Wolfsburg, Germany 
//###  MSchulze780@GMAIL.COM
//###  EcSUHA - ECONOMIC SURVEILLANCE AND HOME AUTOMATION - WWW.EcSUHA.DE
//##################################################################################################
#include "ProjectConfig.h"
#include <esp8266.h>
#include "WebIf_Module.h"
#include "Platform.h"

//#define USE_OPTIMIZE_PRINTF
//TODO:


//#include "c_types.h"
//#include <string.h>
//#include <osapi.h>
//#include "user_interface.h"
//#include "mem.h"
//#include "CGI_StdUi.h"
//#include "CGI_SwITCH.h"
//#include "Control.h"
//#include "espmissingincludes.h"
#include "SCDE.h"
//#include "sntp.h"
//#include "CGI_SCDEETX.h"
//#include "CGI_WiFi.h"
#include "SCDE_CmdParser.h"






/* For Feature: SCDE
 * KEYs-Field-Set for Feature specific query. Will be generated by SCDEH_ParseStrToQueryResultKF()
 * parsed result is stored in struct SCDE_XX_QueryResultKF
 */
enum SCDE_QueryFields
  {						// Bit #XX for debugging
   // Block 1 - func
    SCDE_QF_NAME		= 0		// Bit #00 'NAME'			-> 
  , SCDE_QF_WSAP_Password			// Bit #01 'WSAP_Password'		-> 
  , SCDE_QF_WSAP_RF_Channel			// Bit #02 'WSAP_RF_Channel' 		-> 
  , SCDE_QF_WSAP_Maximal_Connections		// Bit #03 'WSAP_Maximal_Connections'  	-> 
  , SCDE_QF_WSAP_Authentication_Method		// Bit #04 'WSAP_Authentication_Method' -> 
  , SCDE_QF_WSAP_SSID				// Bit #05 'WSAP_SSID'  		-> 
  , SCDE_QF_WSAP_Beacon_Interval		// Bit #06 'WSAP_Beacon_Interval'  	-> 

   // Block 2 - func
  , SCDE_QF_WSAP_IP_Adress			// Bit #07 'WSAP_DHCPS'  		-> 
  , SCDE_QF_WSAP_Netmask			// Bit #08 'WSAP_Netmask'  		-> 
  , SCDE_QF_WSAP_Gateway_Adress			// Bit #09 'WSAP_Gateway_Adress'  	-> 

   // Block 3 - func
  , SCDE_QF_WSAP_DHCPS_Lease_Start_IP		// Bit #10 'WSAP_DHCPS_Lease_Start_IP'  -> 
  , SCDE_QF_WSAP_DHCPS_Lease_End_IP		// Bit #11 'WSAP_DHCPS_Lease_End_IP'  	-> 

   // Block 4 - func
  , SCDE_QF_WSAP_DHCPS				// Bit #12 'WSAP_DHCPS'  		-> 

   // Block 5 - func
  , SCDE_QF_WSAP_MAC_Adress			// Bit #13 'WSAP_MAC_Adress'  		-> 

   // Block 6 - func
  , SCDE_QF_WSAP				// Bit #14 'WSAP'  			-> 

   // Block 7 - func
  , SCDE_QF_Station_IP_Adress			// Bit #15 'Station_IP_Adress'  	-> 
  , SCDE_QF_Station_Netmask			// Bit #16 'Station_Netmask'  		-> 
  , SCDE_QF_Station_Gateway_Adress		// Bit #17 'Station_Gateway_Adress'  	-> 

   // Block 8 - func
  , SCDE_QF_Station				// Bit #18 'Station'  			-> 

   // Block 9 - func
  , SCDE_QF_Station_DHCP			// Bit #19 'Station_DHCP'		-> 

   // Block 10 - func
  , SCDE_QF_Station_Auto_Connect		// Bit #20 'Station_Auto_Connect'	-> 

   // Block 11 - func
  , SCDE_QF_Station_Physical_Mode		// Bit #21 'Station_Physical_Mode'	-> 

   // Block 12 - func
  , SCDE_QF_Station_Get_RSSI			// Bit #22 'Station_Get_RSSI'		-> 

   // Block 13 - func
  , SCDE_QF_Station_MAC_Adress			// Bit #23 'Station_MAC_Adress'		-> 

   // Block 14 - func
  , SCDE_QF_TiSt_NTP_Server_Main		// Bit #24 'TiSt_NTP_Server_Main'	-> 

   // Block 15 - func
  , SCDE_QF_TiSt_NTP_Server_Backup_1		// Bit #25 'TiSt_NTP_Server_Backup_1'	-> 

   // Block 16 - func
  , SCDE_QF_TiSt_NTP_Server_Backup_2		// Bit #26 'TiSt_NTP_Server_Backup_2'	-> 

   // Block 17 - func
  , SCDE_QF_TiSt_Time_Zone			// Bit #27 'TiSt_Time_Zone'		-> 

   // Block 18 - func
  , SCDE_QF_TiSt_Get_Time			// Bit #28 'TiSt_Get_Time'		-> 

   // Block xx - func
  , SCDE_QF_SoCHW_Restart			// Bit #29 'SoCHW_Restart'		-> 

   // Block xx - func
  , SCDE_QF_SoCHW_Factory_Reset_SCDE		// Bit #30 'SoCHW_Factory_Reset_SCDE'	-> 

   // Block xx - func
  , SCDE_QF_SoCHW_Factory_Reset_CAPI		// Bit #31 'SoCHW_Factory_Reset_CAPI'	-> 

   // Block xx - func
  , SCDE_QF_SoCHW_Factory_Reset			// Bit #32 'SoCHW_Factory_Reset'	-> 

  , SCDE_QF_caps				// Bit #33 'caps'			-> 
/*
  // Device specific functions ...
#if DEVICE_IS_LiGHTCoNTROLLER_5L1FX == TRUE
   // Block ?? - func
  , SCDE_QF_Device_Set_HW			// Bit #?? 'Device_Set_HW'		-> 
#endif

#if DEVICE_IS_CoNTROL_1S == TRUE
   // Block ?? - func
  , SCDE_QF_Device_Set_HW			// Bit #?? 'Device_Set_HW'		-> 
#endif

#if DEVICE_IS_CoNTROL_8S1C1ADC == TRUE
   // Block ?? - func
  , SCDE_QF_Device_Set_HW			// Bit #?? 'Device_Set_HW'		-> 
#endif

#if DEVICE_IS_MeDIAPrOMPTER_10S0 == TRUE
   // Block ?? - func
  , SCDE_QF_Device_Set_HW			// Bit #?? 'Device_Set_HW'		-> 
#endif
*/
  , SCDE_QF_Number_of_keys			// Bit #34 MAX 64 IMPLEMENTED !
  };



/* For Feature: SCDE
 * Implemented Feature specific readings. Can be assigned to Query Keys if affected
 */
enum SCDE_Readings
  {						 // Bit #XX for debugging
  // Internals - TiSt-Sharing - Block 1 - func
   SCDE_R_NAME				= (1<<0) // Bit #01 'NAME'			-> 
  ,SCDE_R_WSAP_Password			= (1<<0) // Bit #01 'WSAP_Password'		-> 
  ,SCDE_R_WSAP_RF_Channel		= (1<<0) // Bit #01 'WSAP_RF_Channel'		-> 
  ,SCDE_R_WSAP_Maximal_Connections	= (1<<0) // Bit #01 'WSAP_Maximal_Connections'	-> 
  ,SCDE_R_WSAP_Authentication_Method	= (1<<0) // Bit #01 'WSAP_Authentication_Method'-> 
  ,SCDE_R_WSAP_SSID			= (1<<0) // Bit #01 'WSAP_SSID'			->
  ,SCDE_R_WSAP_Beacon_Interval		= (1<<0) // Bit #01 'WSAP_Beacon_Interval'	-> 

  // Internals - TiSt-Sharing - Block 2 - func
  ,SCDE_R_WSAP_IP_Adress		= (1<<1) // Bit #02 'WSAP_IP_Adress'		-> 
  ,SCDE_R_WSAP_Netmask			= (1<<1) // Bit #02 'WSAP_Netmask'		-> 
  ,SCDE_R_WSAP_Gateway_Adress		= (1<<1) // Bit #02 'WSAP_Gateway_Adress'	-> 

  // Internals - TiSt-Sharing - Block 3 - func
  ,SCDE_R_WSAP_DHCPS_Lease_Start_IP	= (1<<2) // Bit #03 'WSAP_DHCPS_Lease_Start_IP'	-> 
  ,SCDE_R_WSAP_DHCPS_Lease_End_IP	= (1<<2) // Bit #03 'WSAP_DHCPS_Lease_End_IP'	-> 
  ,SCDE_R_WSAP_DHCPS			= (1<<2) // Bit #03 'WSAP_DHCPS'		-> 

  // Internals - TiSt-Sharing - Block 4 - func
  ,SCDE_R_WSAP_MAC_Adress		= (1<<3) // Bit #04 'WSAP_MAC_Adress'		-> 

  // Internals - TiSt-Sharing - Block 5 - func
  ,SCDE_R_WSAP				= (1<<4) // Bit #05 'WSAP'			-> 

  // Internals - TiSt-Sharing - Block 6 - func
  ,SCDE_R_Station_IP_Adress		= (1<<5) // Bit #06 'Station_IP_Adress'	-> 
  ,SCDE_R_Station_Netmask		= (1<<5) // Bit #06 'Station_Netmask'		-> 
  ,SCDE_R_Station_Gateway_Adress	= (1<<5) // Bit #06 'Station_Gateway_Adress'	-> 

  // Internals - TiSt-Sharing - Block 7 - func
  ,SCDE_R_Station			= (1<<6) // Bit #07 'Station'			-> 

  // Internals - TiSt-Sharing - Block 8 - func
  ,SCDE_R_Station_DHCP			= (1<<7) // Bit #08 'Station_DHCP'		-> 

  // Internals - TiSt-Sharing - Block 9 - func
  ,SCDE_R_Station_Auto_Connect		= (1<<8) // Bit #09 'Station_Auto_Connect'	-> 

  // Internals - TiSt-Sharing - Block 10 - func
  ,SCDE_R_Station_Physical_Mode		= (1<<9) // Bit #10 'Station_Physical_Mode'	-> 

  // Internals - TiSt-Sharing - Block 11 - func
  ,SCDE_R_Station_MAC_Adress		= (1<<10) // Bit #11 'Station_MAC_Adress'	-> 

  // Internals - TiSt-Sharing - Block 12 - func
  ,SCDE_R_TiSt_NTP_Server_Main		= (1<<11) // Bit #12 'TiSt_NTP_Server_Main'	-> 
  ,SCDE_R_TiSt_NTP_Server_Backup_1	= (1<<11) // Bit #12 'TiSt_NTP_Server_Backup_1'	-> 
  ,SCDE_R_TiSt_NTP_Server_Backup_2	= (1<<11) // Bit #12 'TiSt_NTP_Server_Backup_2'	-> 
  ,SCDE_R_TiSt_Time_Zone		= (1<<11) // Bit #12 'TiSt_Time_Zone'		-> 


  // Readings - TiSt-Sharing - Block 1 - func
  ,SCDE_R_Station_RSSI			= (1<<12) // Bit #13 'Station_RSSI'		-> 
  ,SCDE_R_TiSt_Time			= (1<<12) // Bit #13 'TiSt_Time'		-> 


  ,SCDE_R_name	= (1<<13)		// Bit #02 'name' + caps + ufid -> 

  };



/* For: SCDE_cgi
 * Implemented KEYS and assigned readings for this query - analyzed by by http_parser_parse_url()
 * Num should meet enum XX_QueryFields
 * Result is stored in struct SCDE_XX_QueryResultKF
 */
 SCDE_QueryKeys_t SCDE_QueryKeys[]=
  {//affected_reading | affected_reading			|  CMD
  // Block 1 - func
   { SCDE_R_NAME						, "name" }			// #00
  ,{ SCDE_R_WSAP_Password					, "WSAP_Password" }		// #01
  ,{ SCDE_R_WSAP_RF_Channel					, "WSAP_RF_Channel" }		// #02
  ,{ SCDE_R_WSAP_Maximal_Connections				, "WSAP_Maximal_Connections" }	// #03
  ,{ SCDE_R_WSAP_Authentication_Method				, "WSAP_Authentication_Method" }// #04
  ,{ SCDE_R_WSAP_SSID						, "WSAP_SSID" }			// #05
  ,{ SCDE_R_WSAP_Beacon_Interval				, "WSAP_Beacon_Interval" }	// #06

  // Block 2 - func
  ,{ SCDE_R_WSAP_IP_Adress					, "WSAP_IP_Adress" }		// #07
  ,{ SCDE_R_WSAP_Netmask					, "WSAP_Netmask" }		// #08
  ,{ SCDE_R_WSAP_Gateway_Adress					, "WSAP_Gateway_Adress" }	// #09

  // Block 3 - func
  ,{ SCDE_R_WSAP_DHCPS_Lease_Start_IP				, "WSAP_DHCPS_Lease_Start_IP" }	// #10
  ,{ SCDE_R_WSAP_DHCPS_Lease_End_IP				, "WSAP_DHCPS_Lease_End_IP" }	// #11

  // Block 4 - func
  ,{ SCDE_R_WSAP_DHCPS						, "WSAP_DHCPS" }		// #12

  // Block 5 - func
  ,{ SCDE_R_WSAP_MAC_Adress					, "WSAP_MAC_Adress" }		// #13

  // Block 6 - func
  ,{ SCDE_R_WSAP						, "WSAP" }			// #14

  // Block 7 - func
  ,{ SCDE_R_Station_IP_Adress					, "Station_IP_Adress" }		// #15
  ,{ SCDE_R_Station_Netmask					, "Station_Netmask" }		// #16
  ,{ SCDE_R_Station_Gateway_Adress				, "Station_Gateway_Adress" }	// #17

  // Block 8 - func
  ,{ SCDE_R_Station						, "Station" }			// #18

  // Block 9 - func
  ,{ SCDE_R_Station_DHCP					, "Station_DHCP" }		// #19

  // Block 10 - func
  ,{ SCDE_R_Station_Auto_Connect				, "Station_Auto_Connect" }	// #20

  // Block 11 - func
  ,{ SCDE_R_Station_Physical_Mode				, "Station_Physical_Mode" }	// #21

  // Block 12 - func
  ,{ SCDE_R_Station_RSSI					, "Station_Get_RSSI" }		// #22

  // Block 13 - func
  ,{ SCDE_R_Station_MAC_Adress					, "Station_MAC_Adress" }	// #23

   // Block 14 - func
  ,{ SCDE_R_TiSt_NTP_Server_Main				, "TiSt_NTP_Server_Main" }	// #24

  // Block 15 - func
  ,{ SCDE_R_TiSt_NTP_Server_Backup_1				, "TiSt_NTP_Server_Backup_1" }	// #25

  // Block 16 - func
  ,{ SCDE_R_TiSt_NTP_Server_Backup_2				, "TiSt_NTP_Server_Backup_2" }	// #26

  // Block 17 - func
  ,{ SCDE_R_TiSt_Time_Zone					, "TiSt_Time_Zone" }		// #27

  // Block 18 - func
  ,{ SCDE_R_TiSt_Time						, "TiSt_Get_Time" }		// #28

  // Block 18 - func
  ,{ 0								, "SoCHW_Restart" }		// #29

  // Block 18 - func
  ,{ 0								, "SoCHW_Factory_Reset_SCDE" }	// #30

  // Block 18 - func
  ,{ 0								, "SoCHW_Factory_Reset_CAPI" }	// #31

 // Block 18 - func
  ,{ 0								, "SoCHW_Factory_Reset" }	// #32

 // ,{ SCDE_R_val | SCDE_R_dim | SCDE_R_name			, "name" }	// #06
 // ,{ SCDE_R_val | SCDE_R_dim | SCDE_R_name			, "caps" }	// #07
  ,{ 0								, "caps" }			// #33
/*
  // Device specific functions ...
#if DEVICE_IS_LiGHTCoNTROLLER_5L1FX == TRUE
 // Block 18 - func
  ,{ 0								, "Device_Set_HW" }		// #??
#endif

#if DEVICE_IS_CoNTROL_1S == TRUE
 // Block 18 - func
  ,{ 0								, "Device_Set_HW" }		// #??
#endif

#if DEVICE_IS_CoNTROL_8S1C1ADC == TRUE
 // Block 18 - func
  ,{ 0								, "Device_Set_HW" }		// #??
#endif

#if DEVICE_IS_MeDIAPrOMPTER_10S0 == TRUE
 // Block 18 - func
  ,{ 0								, "Device_Set_HW" }		// #??
#endif
*/
  }; // number of elements should be equal with XX_QF_max, LIMIT IS 64 ELEMENTS !






/*
 *--------------------------------------------------------------------------------------------------
 *FName: SCDE_FeatCmdParser
 * Desc: Parser func for SCDE Feature. Parses Features Args for ADID
 *       Writes results to pointers: &RespArgsWPos, &HdrFldsWPos, &BdyDataWPos
 * Para: WebIF_HTTPDConnSlotData_t *conn -> ptr to connection slot
 *       char* Args -> ptr to args that should be parsed
 *       uint16_t ADID -> validity checked feature ID to use
 *       char* &RespArgsWPos -> Write position for RespArgs
 *       char* &HdrFldsWPos -> Write position for HdrFlds
 *       char* &BdyDataWPos -> Write position for BdyData
 * Rets: int -> new status 0 = OK no error (enum scde_errno)
 *--------------------------------------------------------------------------------------------------
 */
// returns error code ?
int ICACHE_FLASH_ATTR
SCDE_FeatCmdParser(WebIf_HTTPDConnSlotData_t *conn		// ziel: parsen ohne info aus conn slot ?!?
			,char* Args
		      //,HdrFldsLinkedList?
		      //,char* Data //BdyData
			,uint16_t ADID		// intern: FID Feature ID
			,char** RespArgsWPosX	// intern:RespWPos
			,char** HdrFldsWPosX
			,char** BdyDataWPosX)	// intern: DataWPos
  {

 char* RespArgsWPos = *RespArgsWPosX;
// char* HdrFldsWPos = *HdrFldsWPosX;
// char* BdyDataWPos = *BdyDataWPosX;

  // remember the readings affected by the parsing process
  uint32_t AffectedReadings = 0;

  // Parse query-string to allocated query-result-Key-Field
  SCDE_XX_QueryResultKF_t *QueryResultKF = 
	SCDEH_ParseStrToQueryResultKF(SCDE_QF_Number_of_keys	// Num KEYs MAX
	,SCDE_QueryKeys						// KEYs string
	,Args);							// input query string

//>Prepare structures and get current values from SDK-----------------------------------------------

  // block #1 get current Service-AP settings
  wifi_config_t ap_wifi_config;
  esp_wifi_get_config (WIFI_IF_AP, &ap_wifi_config);

  // block #2  get current Service AP IP-Settings
  tcpip_adapter_ip_info_t ap_ip_info;
  tcpip_adapter_get_ip_info(TCPIP_ADAPTER_IF_AP, &ap_ip_info);

  // block #4 get current Service AP DHCP-Status
  tcpip_adapter_dhcp_status_t ap_dhcp_status;
  tcpip_adapter_dhcpc_get_status(TCPIP_ADAPTER_IF_AP,&ap_dhcp_status); 

  // block #5 get current Service AP MAC Adress
  uint8_t ap_mac_addr[8];
  esp_wifi_get_mac(WIFI_IF_AP,(uint8_t *) &ap_mac_addr);

  // block #13 get the bandwith of the Service Access Point
  wifi_bandwidth_t ap_wifi_bandwidth;
  esp_wifi_get_bandwidth(WIFI_IF_AP, &ap_wifi_bandwidth);

  // block #7 get current Station Settings
  wifi_config_t sta_wifi_config;
  esp_wifi_get_config (WIFI_IF_STA, &sta_wifi_config);

  // block #7 get current Station IP Settings
  tcpip_adapter_ip_info_t sta_ip_info;
  tcpip_adapter_get_ip_info(TCPIP_ADAPTER_IF_STA, &sta_ip_info);

  // block #9 get current Station DHCP-Status
  tcpip_adapter_dhcp_status_t sta_dhcp_status;
  tcpip_adapter_dhcpc_get_status(TCPIP_ADAPTER_IF_STA,&sta_dhcp_status); 

  // block #10 get current Station Auto-Connect-Status
  bool sta_autoconnect_status;
  wifi_station_get_auto_connect(&sta_autoconnect_status);

  // block #12 get current Station MAC Adress
  uint8_t sta_mac_addr[8];
  esp_wifi_get_mac(WIFI_IF_STA, (uint8_t *) &sta_mac_addr);

  // block #13  get the bandwith of Station
  wifi_bandwidth_t sta_wifi_bandwidth;
  esp_wifi_get_bandwidth(WIFI_IF_STA, &sta_wifi_bandwidth);

  // block #13 get the WiFi Country
  wifi_country_t country;
  esp_wifi_get_country(&country);

  // block #6 get current Wifi operating mode (Station + Service AP)
  wifi_mode_t wifi_mode;
  esp_wifi_get_mode(&wifi_mode);

  // block #6 get current Wifi operating mode (Station + Service AP)
  wifi_ps_type_t wifi_ps_type;
  esp_wifi_get_ps(&wifi_ps_type);



  // block #3 get current Service AP DHCP-Settings
//spz    struct dhcps_lease dhcps_lease;
//spz   wifi_softap_get_dhcps_lease(&dhcps_lease);

//spz  // block #11 get current Station Physical Mode
//spz  int WifiStationPhyMode = wifi_get_phy_mode();




//>Caps Bit 1---------------------------------------------------------------------------------------

  // name=[a-f-A-F0-9] -> Setze Farbe für RGB Kanal (uint24) (0-x)
  // name=[a-f-A-F0-9] -> Set color for RGB channel (uint24) (0-x)
  if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_NAME)

	{

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_NAME].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_NAME].len
		,(char*) &ap_wifi_config.ap.ssid
		,sizeof (ap_wifi_config.ap.ssid)
		,2) )

		{	

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_NAME].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += sprintf( RespArgsWPos,"cmd=name");

		}
	}

//--------------------------------------------------------------------------------------------------

  // rval=[0-9] -> Setze Wert für den roten Anteil vom RGB Kanal (uint8) (0-x)
  // rval=[0-9] -> Set value for the red component of the RGB channel (uint8) (0-x)

  if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_Password)

	{

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Password].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Password].len
		,(char*) &ap_wifi_config.ap.password
		,sizeof (ap_wifi_config.ap.password)
		,2) )

		{	

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Password].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += sprintf( RespArgsWPos,"cmd=WSAP_Password");

		}
	}

//--------------------------------------------------------------------------------------------------

  // WSAP_RF_Channel=[1-13] -> Setze Wireless Service Access Point Kanal (Station Kanal hat Priorität)
  // WSAP_RF_Channel=[1-13] -> Set Wireless Service Access Point channel (Station Channel has priority)

  if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_RF_Channel)

	{

	uint8_t NewChan;

	// valid input happened ?
	if (SCDEH_GetDecUInt8Val((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_RF_Channel].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_RF_Channel].len, &NewChan))

		{

		if ( (NewChan >= 1) && (NewChan <= 13) )

			{

			// save new channel
			ap_wifi_config.ap.channel = NewChan;

			// mark affected readings for TX
			AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_RF_Channel].AffectedReadings;

			// New Timestamp
			SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
				GetUniqueTIST();

			// Push processed CMD to to Response ...
			RespArgsWPos += sprintf( RespArgsWPos,"cmd=WSAP_RF_Channel");

			}
		}

	}

//--------------------------------------------------------------------------------------------------

  // rmax=[ ] -> Setze vom RGB Kanal den roten Anteil maximal (0-x)
  // rmax=[ ] -> Set red component of the RGB channel to maximum (0-x)

  if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_Maximal_Connections)

	{
/*
	uint8 NewChan;

	// valid input happened ?
	if (SCDEH_GetDecUInt8Val((uint8*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_RF_Channel].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_RF_Channel].len, &NewChan))

		{

		if ( (NewVal >= 1) && (NewVal <= 13) )
			{

			// save new channel
			wifi_ap_config.channel = (uint8) NewVal;

			// mark affected readings for TX
			AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_RF_Channell].AffectedReadings;

			// New Timestamp
			SysCfgRamNoMirror->MyLiGHT_FeatCfgRamNoMirror_M1[ADID].RB01_X_TiSt =
				GetUniqueTIST();

			// Push processed CMD to to Response ...
			RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=WSAP_RF_Channel");
 
			}
		}
*/
	}

//--------------------------------------------------------------------------------------------------

  // rmin=[ ] -> Setze vom RGB Kanal den roten Anteil minimal (0-x)
  // rmin=[ ] -> Set red component of the RGB channel to minimum (0-x)

  if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_Authentication_Method)

	{
	uint8_t NewAuthMode;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Authentication_Method].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Authentication_Method].len, &NewAuthMode, Auth_M))

		{

		// save auth mode
		ap_wifi_config.ap.authmode = NewAuthMode;

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Authentication_Method].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += sprintf( RespArgsWPos,"cmd=WSAP_Authentication_Method");

		}
	}

//--------------------------------------------------------------------------------------------------

  // gval=[0-9] -> Setze Wert für den gruenen Anteil vom RGB Kanal (uint8) (0-x)
  // gval=[0-9] -> Set value for the gree component of the RGB channel (uint8) (0-x)

  if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_SSID)

	{

	uint8_t NewSSIDSetting;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_SSID].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_SSID].len, &NewSSIDSetting, SSID_H))

		{

		// save auth mode
		ap_wifi_config.ap.ssid_hidden = NewSSIDSetting;

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_SSID].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += sprintf( RespArgsWPos,"cmd=WSAP_SSID");

		}
	}

//>Caps Bit 1---------------------------------------------------------------------------------------

  // WSAP-Beacon-Interval=[100-60000] -> Setze den Beacon-Sendeinterval des Wireless Service Access Points
  // WSAP-Beacon-Interval=[100-60000] -> Set the beacon interval of the Wireless Service Access Point

  if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_Beacon_Interval)

	{
	uint16_t NewBI;

	// valid input happened ?
	if (SCDEH_GetDecUInt16Val((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Beacon_Interval].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Beacon_Interval].len, &NewBI))

		{

		if ( (NewBI >= 100) && (NewBI <= 60000) )
			{

			// save beacon interval
			ap_wifi_config.ap.beacon_interval = (uint16) NewBI;

			// mark affected readings for TX
			AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_Beacon_Interval].AffectedReadings;

			// New Timestamp
			SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
				GetUniqueTIST();

			// Push processed CMD to to Response ...
			RespArgsWPos += sprintf( RespArgsWPos,"cmd=WSAP-Beacon-Interval");

			}
		}

	}

//--------------------------------------------------------------------------------------------------

  // gmax=[ ] -> Setze vom RGB Kanal den gruenen Anteil maximal (0-x)
  // gmax=[ ] -> Set green component of the RGB channel to maximum (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_IP_Adress)

	{



	}

//--------------------------------------------------------------------------------------------------

  // gmin=[ ] -> Setze vom RGB Kanal den gruenen Anteil minimal (0-x)
  // gmin=[ ] -> Set green component of the RGB channel to minimum (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_Netmask)

	{


	}

//--------------------------------------------------------------------------------------------------

  // bval=[0-9] -> Setze Wert für den blauen Anteil vom RGB Kanal (uint8) (0-x)
  // bval=[0-9] -> Set value for the blue component of the RGB channel (uint8) (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_Gateway_Adress)

	{


	}

//--------------------------------------------------------------------------------------------------

  // bmax=[ ] -> Setze vom RGB Kanal den blauen Anteil maximal (0-x)
  // bmax=[ ] -> Set blue component of the RGB channel to maximum (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_DHCPS_Lease_Start_IP)

	{



	}

//--------------------------------------------------------------------------------------------------

  // bmin=[ ] -> Setze vom RGB Kanal den blauen Anteil minimal (0-x)
  // bmin=[ ] -> Set blue component of the RGB channel to minimum (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_DHCPS_Lease_End_IP)

	{

	}

//--------------------------------------------------------------------------------------------------

  // bdim=[0-9] -> Setze dimmer für den blauen Anteil vom RGB Kanal (uint8) (0-x)
  // bdim=[0-9] -> Set dimming for the blue component of the RGB channel (uint8) (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_DHCPS)

	{

	uint8_t NewDHCPSStatus;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_DHCPS].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_DHCPS].len, &NewDHCPSStatus, DisEn))

		{

		// save DHCPS Status
		WifiSoftAPDHCPSStatus = NewDHCPSStatus;

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP_DHCPS].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB03_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=WSAP_DHCPS");

		}
	}

//--------------------------------------------------------------------------------------------------

  // red=[ ] -> Setze RGB Kanal auf Leuchtfarbe rot (0-x)
  // red=[ ] -> Set RGB Channel SCDEing red (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP_MAC_Adress)

	{


	}

//--------------------------------------------------------------------------------------------------

  // gree=[ ] -> Setze RGB Kanal auf Leuchtfarbe grün (0-x)
  // gree=[ ] -> Set RGB Channel SCDEing green (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_WSAP)

	{

	uint8_t NewApOpMode;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP].len, &NewApOpMode, DisEn))

		{

		// save ap op mode
		WifiApOpMode = NewApOpMode;

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_WSAP].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB05_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
//		RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=WSAP");

		RespArgsWPos = SCDEH_AddCmdToWritePos(RespArgsWPos
			,SCDE_QueryKeys
			,SCDE_QF_WSAP);

		}
	}

//--------------------------------------------------------------------------------------------------

  // blue=[ ] -> Setze RGB Kanal auf Leuchtfarbe blau (0-x)
  // blue=[ ] -> Set RGB Channel SCDEing blue (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Station_IP_Adress)

	{


	}

//--------------------------------------------------------------------------------------------------

  // oran=[ ] -> Setze RGB Kanal auf Leuchtfarbe orange (0-x)
  // oran=[ ] -> Set RGB Channel SCDEing orange (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Station_Netmask)

	{



	}

//--------------------------------------------------------------------------------------------------

  // yell=[ ] -> Setze RGB Kanal auf Leuchtfarbe gelb (0-x)
  // yell=[ ] -> Set RGB Channel SCDEing yellow (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Station_Gateway_Adress)

	{



	}

//--------------------------------------------------------------------------------------------------

  // blck=[ ] -> Setze RGB Kanal auf Leuchtfarbe schwarz (0-x)
  // blck=[ ] -> Set RGB Channel SCDEing black (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Station)

	{



	}

//--------------------------------------------------------------------------------------------------

  // whte=[ ] -> Setze RGB Kanal auf Leuchtfarbe weiss (0-x)
  // whte=[ ] -> Set RGB Channel SCDEing white (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Station_DHCP)

	{



	}

//>Caps Bit 3---------------------------------------------------------------------------------------

  // wval=[0-9] -> Setze Wert für warm-weissen Kanal (uint8) (0-x)
  // wval=[0-9] -> Set value for warm white channel (uint8) (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Station_Auto_Connect)

	{


	}

//--------------------------------------------------------------------------------------------------

  // wdim=[0-9] -> Setze dimmer für warm-weissen Kanal (uint8) (0-x)
  // wdim=[0-9] -> Set dimming for warm white channel (uint8) (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Station_Physical_Mode)

	{

	uint8_t NewPhyMode;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_Station_Physical_Mode].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_Station_Physical_Mode].len, &NewPhyMode, PhMode))

		{

		// save Phy Mode
		WifiStationPhyMode = NewPhyMode;

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_Station_Physical_Mode].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB10_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=Station_Physical_Mode");

		}
	}

//--------------------------------------------------------------------------------------------------

  // wmax=[ ] -> Setze warm-weissen Kanal maximal (0-x)
  // wmax=[ ] -> Set warm white channel maximum (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Station_Get_RSSI)

	{



	}





//--------------------------------------------------------------------------------------------------

  // TiSt_NTP_Server_Main=[azAZ09._] -> Setze NTP-Server Adresse (0-x)
  // TiSt_NTP_Server_Main=[azAZ09._] -> Set NTP-Server adress (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_TiSt_NTP_Server_Main)

	{

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Main].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Main].len
		,(char*) &SysCfgRamFlashMirrored->NTDomain1
		,sizeof (SysCfgRamFlashMirrored->NTDomain1)
		,2) )

		{	

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// stop sntp for changes
		sntp_stop();

		// set new  sntp server name
		sntp_setservername(0, (char*) &SysCfgRamFlashMirrored->NTDomain1);

		// reinit sntp
		sntp_init();

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Main].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB12_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=TiSt_NTP_Server_Main");

		}
	}

//--------------------------------------------------------------------------------------------------

  // TiSt_NTP_Server_Backup_1=[azAZ09._] -> Setze NTP-Server Adresse, Backup 1 (0-x)
  // TiSt_NTP_Server_Backup_1=[azAZ09._] -> Set NTP-Server adress, Backup 1 (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_TiSt_NTP_Server_Backup_1)

	{

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Backup_1].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Backup_1].len
		,(char*) &SysCfgRamFlashMirrored->NTDomain2
		,sizeof (SysCfgRamFlashMirrored->NTDomain2)
		,2) )

		{	

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// stop sntp for changes
		sntp_stop();

		// set new  sntp server name
		sntp_setservername(1, (char*) &SysCfgRamFlashMirrored->NTDomain2);

		// reinit sntp
		sntp_init();

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Backup_1].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB12_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=TiSt_NTP_Server_Backup_1");

		}
	}

//--------------------------------------------------------------------------------------------------

  // TiSt_NTP_Server_Backup_2=[azAZ09._] char[?] -> Setze NTP-Server Adresse, Backup 2 (0-x)
  // TiSt_NTP_Server_Backup_2=[azAZ09._] char[?] -> Set NTP-Server adress, Backup 2 (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_TiSt_NTP_Server_Backup_2)

	{

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Backup_2].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Backup_2].len
		,(char*) &SysCfgRamFlashMirrored->NTDomain3
		,sizeof (SysCfgRamFlashMirrored->NTDomain3)
		,2) )

		{	

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// stop sntp for changes
		sntp_stop();

		// set new  sntp server name
		sntp_setservername(2, (char*) &SysCfgRamFlashMirrored->NTDomain3);

		// reinit sntp
		sntp_init();

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_NTP_Server_Backup_2].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB12_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=TiSt_NTP_Server_Backup_2");

		}
	}

//--------------------------------------------------------------------------------------------------

  // wmax=[ ] -> Setze warm-weissen Kanal maximal (0-x) 
  // wmax=[ ] -> Set warm white channel maximum (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_TiSt_Time_Zone)

	{

	int8 NewTZ;

	// valid input happened ?
	if (SCDEH_GetDecInt8Val((uint8*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_Time_Zone].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_Time_Zone].len, &NewTZ))

		{

		if ( (NewTZ >= -11) && (NewTZ <= 13) )

			{

			// save new time-zone
			SysCfgRamFlashMirrored->NTTimezone = NewTZ;

			// save mirror
			SCDE_SaveSysCfgRamFlashMirroredToMirror();

			// stop sntp for changes
			sntp_stop();

			// set new sntp TZ
			sntp_set_timezone(NewTZ);

			// reinit sntp
			sntp_init();

			// mark affected readings for TX
			AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_TiSt_Time_Zone].AffectedReadings;

			// New Timestamp
			SysCfgRamNoMirror->MySCDE_FeatCfgRamNoMirror[ADID].IB12_X_TiSt =
				GetUniqueTIST();

			// Push processed CMD to to Response ...
			RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=TiSt_Time_Zone");

			}
		}

	}

//--------------------------------------------------------------------------------------------------

  // wmax=[ ] -> Setze warm-weissen Kanal maximal (0-x)
  // wmax=[ ] -> Set warm white channel maximum (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_TiSt_Get_Time)

	{



	}


//--------------------------------------------------------------------------------------------------

  // wmax=[ ] -> Setzt das Geräte warm-weissen Kanal maximal (0-x)
  // wmax=[ ] -> Set the Device into state 'restart'

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_SoCHW_Restart)

	{

	system_restart();

	}

//--------------------------------------------------------------------------------------------------

  // SoCHW_Factory_Reset_SCDE=[ ] -> Setzt die Smart-Connected-Device-Engine auf Werkseinstellung zurück 'factory reset'
  // SoCHW_Factory_Reset_SCDE=[ ] -> Set Smart-Connected-Device-Engine to state 'factory reset'

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_SoCHW_Factory_Reset_SCDE)

	{

//	SCDE_ReconstructSysCfgRomNoMirror();		// todo
//	SCDE_ReconstructSysCfgRamNoMirror();		// reconstruct Sys-Cfg stored in ram (done by reboot)
	SCDE_ReconstructSysCfgRamFlashMirrored();	// reconstruct Sys-Cfg stored in ram (flash-mirrored) 
	SCDE_ReconstructSysCfgRamRtcMirrored();		// reconstruct Sys-Cfg stored in rtc

	// initial setup / correction of the SDK parameters
	SCDE_SDKInitialParameterSetup();

	// fresh start
	system_restart();

	}

//--------------------------------------------------------------------------------------------------

  // SoCHW_Factory_Reset_CAPI=[ ] -> Setzt die SoC-Hardware-Chip-API auf Werkseinstellung zurück 'factory reset'
  // SoCHW_Factory_Reset_CAPI=[ ] -> Set SoC-Hardware-Chip-API to state 'factory reset'

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_SoCHW_Factory_Reset_CAPI)

	{

	// restore SDK parameters (SDK-factory reset)
	system_restore();

//	SCDE_ReconstructSysCfgRomNoMirror();		// todo
//	SCDE_ReconstructSysCfgRamNoMirror();		// reconstruct Sys-Cfg stored in ram (done by reboot)
	SCDE_ReconstructSysCfgRamFlashMirrored();	// reconstruct Sys-Cfg stored in ram (flash-mirrored) 
	SCDE_ReconstructSysCfgRamRtcMirrored();		// reconstruct Sys-Cfg stored in rtc

	// initial setup / correction of the SDK parameters
	SCDE_SDKInitialParameterSetup();

	// fresh start
	system_restart();

	}

//--------------------------------------------------------------------------------------------------

  // SoCHW_Factory_Reset_CAPI=[ ] -> Setzt die SoC-Hardware-Chip-API auf Werkseinstellung zurück 'factory reset'
  // SoCHW_Factory_Reset_CAPI=[ ] -> Set SoC-Hardware-Chip-API to state 'factory reset'

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_SoCHW_Factory_Reset)

	{

	// restore SDK parameters (SDK-factory reset)
	system_restore();

	// initial setup / correction of the SDK parameters
	SCDE_SDKInitialParameterSetup();

	// fresh start
	system_restart();

	}

//>Caps Bit n.a.------------------------------------------------------------------------------------
/*
  // name=[a-zA-Z0-9_.] -> Setze einen neuen Feature Namen (char[31]) (0-x)
  // name=[a-zA-Z0-9_.] -> Set a new Feature Name (char[31]) (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_name)

	{



	}
*/
//>Caps Bit n.a.------------------------------------------------------------------------------------

  // caps=[ ] -> Fragt nach den Fähigkeiten-Bits (0-x)
  // caps=[ ] -> Request for Capabilities-Bits (0-x)


  if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_caps)

	{

	// mark affected readings for TX
	AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_caps].AffectedReadings;

	// New Timestamp
//	WriteInt32toSysCfgRamRtcMirrored(&SysCfgRamRtcMirrored->MySCDE_FeatCfgRamRtcMirrored_M1[ADID].IB01_X_TiSt,
//		GetUniqueTIST());
//bug in anderem code

	// Push processed CMD to to Response ...
	RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=caps");

	}

//--------------------------------------------------------------------------------------------------

#if DEVICE_IS_LiGHTCoNTROLLER_5L1FX == TRUE
  // SoCHW_Factory_Reset_CAPI=[ ] -> Setzt die SoC-Hardware-Chip-API auf Werkseinstellung zurück 'factory reset'
  // SoCHW_Factory_Reset_CAPI=[ ] -> Set SoC-Hardware-Chip-API to state 'factory reset'

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Device_Set_HW)

	{

	int8 NewHW;

	// valid input happened ?
	if (SCDEH_GetDecInt8Val((uint8*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].len, &NewHW))

		{

		if ( (NewHW >= 0) && (NewHW <= 4) )

			{

			SysCfgRamFlashMirrored->MyDevice_CfgRamFlashMirrored.LiGHTHWType = NewHW;

			// set new project config (including parameters for LiGHT Feature)
			Device_ChangeHWCfg(NewHW);

			// change operating Mode for LiGHT Feature
			LiGHT_ChangeOp_M(NewHW);

			// backup to mirror here
			SCDE_SaveSysCfgRamFlashMirroredToMirror();

			// mark affected readings for TX
			AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].AffectedReadings;

			// Push processed CMD to to Response ...
			RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=Device_Set_HW");

			}
		}
	}
#endif

//--------------------------------------------------------------------------------------------------

#if DEVICE_IS_CoNTROL_1S == TRUE
  // SoCHW_Factory_Reset_CAPI=[ ] -> Setzt die SoC-Hardware-Chip-API auf Werkseinstellung zurück 'factory reset'
  // SoCHW_Factory_Reset_CAPI=[ ] -> Set SoC-Hardware-Chip-API to state 'factory reset'

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Device_Set_HW)

	{

	int8 NewHW;

	// valid input happened ?
	if (SCDEH_GetDecInt8Val((uint8*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].len, &NewHW))

		{

		if ( (NewHW >= 0) && (NewHW <= 4) )

			{

			SysCfgRamFlashMirrored->MyDevice_CfgRamFlashMirrored.SwITCHHWType = NewHW;

			// set new project config (including parameters for LiGHT Feature)
			Device_ChangeHWCfg(NewHW);

			// change operating Mode for LiGHT Feature
			SwITCH_ChangeOp_M(NewHW);

			// backup to mirror here
			SCDE_SaveSysCfgRamFlashMirroredToMirror();

			// mark affected readings for TX
			AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].AffectedReadings;

			// Push processed CMD to to Response ...
			RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=Device_Set_HW");

			}
		}
	}
#endif

//--------------------------------------------------------------------------------------------------

#if DEVICE_IS_CoNTROL_8S1C1ADC == TRUE
  // SoCHW_Factory_Reset_CAPI=[ ] -> Setzt die SoC-Hardware-Chip-API auf Werkseinstellung zurück 'factory reset'
  // SoCHW_Factory_Reset_CAPI=[ ] -> Set SoC-Hardware-Chip-API to state 'factory reset'

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Device_Set_HW)

	{

	int8 NewHW;

	// valid input happened ?
	if (SCDEH_GetDecInt8Val((uint8*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].len, &NewHW))

		{

		if ( (NewHW >= 0) && (NewHW <= 4) )

			{

			SysCfgRamFlashMirrored->MyDevice_CfgRamFlashMirrored.SwITCHHWType = NewHW;

			// set new project config (including parameters for LiGHT Feature)
			Device_ChangeHWCfg(NewHW);

			// change operating Mode for LiGHT Feature
			SwITCH_ChangeOp_M(NewHW);

			// backup to mirror here
			SCDE_SaveSysCfgRamFlashMirroredToMirror();

			// mark affected readings for TX
			AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].AffectedReadings;

			// Push processed CMD to to Response ...
			RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=Device_Set_HW");

			}
		}
	}
#endif

//--------------------------------------------------------------------------------------------------

#if DEVICE_IS_MeDIAPrOMPTER_10S0 == TRUE
  // SoCHW_Factory_Reset_CAPI=[ ] -> Setzt die SoC-Hardware-Chip-API auf Werkseinstellung zurück 'factory reset'
  // SoCHW_Factory_Reset_CAPI=[ ] -> Set SoC-Hardware-Chip-API to state 'factory reset'

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SCDE_QF_Device_Set_HW)

	{

	int8 NewHW;

	// valid input happened ?
	if (SCDEH_GetDecInt8Val((uint8*)Args+QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].off
		,QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].len, &NewHW))

		{

		if ( (NewHW >= 0) && (NewHW <= 1) )

			{

			SysCfgRamFlashMirrored->MyDevice_CfgRamFlashMirrored.S0HWType = NewHW;

			// set new project config (including parameters for LiGHT Feature)
			Device_ChangeHWCfg(NewHW);

			// change operating Mode for LiGHT Feature
		//	S0_ChangeOp_M(NewHW);

			// backup to mirror here
			SCDE_SaveSysCfgRamFlashMirroredToMirror();

			// mark affected readings for TX
			AffectedReadings |= QueryResultKF->KeyField_Data_t[SCDE_QF_Device_Set_HW].AffectedReadings;

			// Push processed CMD to to Response ...
			RespArgsWPos += os_sprintf( RespArgsWPos,"cmd=Device_Set_HW");

			}
		}
	}
#endif

//>Save changes to SDK -----------------------------------------------------------------------------

  // Processed block 01 readings, that affects wifi_ap_config (Service-Access-Point-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_NAME
			| SCDE_R_WSAP_Password
			| SCDE_R_WSAP_RF_Channel
			| SCDE_R_WSAP_Maximal_Connections
			| SCDE_R_WSAP_Authentication_Method
			| SCDE_R_WSAP_SSID
			| SCDE_R_WSAP_Beacon_Interval) )

	{

	# if SCDE_WIFI_DBG >= 5
	HexDumpOut ("WSAP wifi_ap_config ch!",
		&wifi_ap_config,
		sizeof(wifi_ap_config));
	# endif

	// store length of ssid (may be changed)
	wifi_ap_config.ssid_len = 
		strlen((char*)&wifi_ap_config.ssid);

	// Set new AP Cfg
	esp_wifi_set_config (WIFI_IF_AP, &wifi_ap_config);

	// Set new Hostname
	wifi_station_set_hostname((char*) &wifi_ap_config.ssid);

	}

   // Processed block 02 readings, that affects AP_ip_info (Service-Access-Point-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_WSAP_IP_Adress
			| SCDE_R_WSAP_Netmask
			| SCDE_R_WSAP_Gateway_Adress) )

	{

	# if SCDE_WIFI_DBG >= 5
	HexDumpOut ("WSAP ip_info ch!",
		&AP_ip_info,
		sizeof(AP_ip_info));
	# endif

	// Set new AP IP INFO
	tcpip_adapter_set_ip_info(TCPIP_ADAPTER_IF_AP, &AP_ip_info);

	}

  // Processed block 03 readings, that affects AP_dhcps_lease (Service-Access-Point-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_WSAP_DHCPS_Lease_Start_IP
			| SCDE_R_WSAP_DHCPS_Lease_End_IP
			| SCDE_R_WSAP_DHCPS) )

	{

	# if SCDE_WIFI_DBG >= 5
	HexDumpOut ("WSAP dhcps_lease ch!",
		&dhcps_lease,
		sizeof(dhcps_lease));
	# endif

	// Set new AP dhcps_lease
	wifi_softap_set_dhcps_lease(&dhcps_lease);

	// set new DHCPS Status
	if (WifiSoftAPDHCPSStatus) tcpip_adapter_dhcpc_start(WIFI_IF_AP);
	else tcpip_adapter_dhcpc_stop(WIFI_IF_AP);

	}

  // Processed block 04 readings, that affects AP macaddr (Service-Access-Point-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_WSAP_MAC_Adress ) )

	{

	# if SCDE_WIFI_DBG >= 5
	HexDumpOut ("WSAP macaddr ch!",
		&WifiSoftAPMACAddr,
		sizeof(WifiSoftAPMACAddr));
	# endif

	// Set new AP macaddr
	//wifi_set_macaddr(SOFTAP_IF, (uint8 *) &WifiSoftAPMACAddr;

	}

  // Processed block 05 readings, that affects AP dhcps status (Service-Access-Point-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_WSAP ) )

	{

	// Set new AP opmode
	esp_wifi_set_mode( (esp_wifi_get_mode() & 0b01) | (WifiApOpMode << 1) );

	}

  // Processed block 06 readings, that affects STA ip_info (Station-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_Station_IP_Adress
			|SCDE_R_Station_Netmask
			|SCDE_R_Station_Gateway_Adress ) )

	{

	# if SCDE_WIFI_DBG >= 5
	HexDumpOut ("STA ip_info ch!",
		&STA_ip_info,
		sizeof(STA_ip_info));
	# endif

	// Set new STA ip_info
	tcpip_adapter_set_ip_info(TCPIP_ADAPTER_IF_STA, &STA_ip_info);

	}

 // Processed block 07 readings, that affects STA opmode (Station-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_Station ) )

	{

	// Set new AP opmode
 	//  int WifiStaOpMode = (wifi_get_opmode() & 0b01);

	}


  // Processed block 08 readings, that affects STA dhcp (Station-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_Station_DHCP ) )

	{

	// Set new ?
 	//  int WifiStationDHCPStatus = wifi_station_dhcpc_status();

	}


  // Processed block 9 readings, that affects STA auto connect status (Station-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_Station_Auto_Connect ) )

	{

	// Set new STA auto connect status
 	//wifi_station_set_auto_connect(WifiStationAutoConnectStatus);

	}


 // Processed block 10 readings, that affects STA phy mode (Station-Configuration) ? then save & set
  if (AffectedReadings & ( SCDE_R_Station_Physical_Mode ) )

	{

	// Set new STA phy mode
 	wifi_set_phy_mode(WifiStationPhyMode);

	}








//4debug output
//AffectedReadings = 0xffffffff;


//>Add Readings: Internals - TiSt-Sharing - Block 1 ------------------------------------------------

  if (AffectedReadings & (SCDE_R_NAME
		| SCDE_R_WSAP_Password
		| SCDE_R_WSAP_RF_Channel
		| SCDE_R_WSAP_Maximal_Connections
		| SCDE_R_WSAP_Authentication_Method
		| SCDE_R_WSAP_SSID
		| SCDE_R_WSAP_Beacon_Interval) )
	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&NAME=%s"
		 "&WSAP_Password=%s"
		 "&WSAP_RF_Channel=%u"
		 "&WSAP_Maximal_Connections=%u"
		 "&WSAP_Authentication_Method=%s"
		 "&WSAP_SSID=%s"
		 "&WSAP_Beacon_Interval=%u"
		,(char*) &wifi_ap_config.ssid
		,(char*) &wifi_ap_config.password
		,wifi_ap_config.channel
		,wifi_ap_config.max_connection
		,SCDE_GetDesc(Auth_M,wifi_ap_config.authmode)
		,SCDE_GetDesc(SSID_H,wifi_ap_config.ssid_hidden)
		,wifi_ap_config.beacon_interval);

	}

//>Add Readings: Internals - TiSt-Sharing - Block 2 ------------------------------------------------

  if (AffectedReadings & ( SCDE_R_WSAP_IP_Adress
		| SCDE_R_WSAP_Netmask
		| SCDE_R_WSAP_Gateway_Adress) )

	{

	RespArgsWPos += os_sprintf( RespArgsWPos

		,"&WSAP_IP_Adress=%03d.%03d.%03d.%03d"
		 "&WSAP_Netmask=%03d.%03d.%03d.%03d"
		 "&WSAP_Gateway_Adress=%03d.%03d.%03d.%03d"
		,AP_ip_info.ip.addr & 0xff
		,(AP_ip_info.ip.addr >> 8) & 0xff
		,(AP_ip_info.ip.addr >> 16) & 0xff
		,AP_ip_info.ip.addr >> 24
		,AP_ip_info.netmask.addr & 0xff
		,(AP_ip_info.netmask.addr >> 8) & 0xff
		,(AP_ip_info.netmask.addr >> 16) & 0xff
		,AP_ip_info.netmask.addr >> 24
		,AP_ip_info.gw.addr & 0xff
		,(AP_ip_info.gw.addr >> 8) & 0xff
		,(AP_ip_info.gw.addr >> 16) & 0xff
		,AP_ip_info.gw.addr >> 24);

	}

//>Add Readings: Internals - TiSt-Sharing - Block 3 ------------------------------------------------

  if (AffectedReadings & (SCDE_R_WSAP_DHCPS_Lease_Start_IP
		| SCDE_R_WSAP_DHCPS_Lease_End_IP
		| SCDE_R_WSAP_DHCPS ) )

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&WSAP_DHCPS_Lease_Start_IP=%03d.%03d.%03d.%03d"
		 "&WSAP_DHCPS_Lease_End_IP=%03d.%03d.%03d.%03d"
		 "&WSAP_DHCPS=%s"
		, dhcps_lease.start_ip.addr & 0xff
		,(dhcps_lease.start_ip.addr >> 8) & 0xff
		,(dhcps_lease.start_ip.addr >> 16) & 0xff
		, dhcps_lease.start_ip.addr >> 24
		, dhcps_lease.end_ip.addr & 0xff
		,(dhcps_lease.end_ip.addr >> 8) & 0xff
		,(dhcps_lease.end_ip.addr >> 16) & 0xff
		, dhcps_lease.end_ip.addr >> 24
		,SCDE_GetDesc(DisEn, WifiSoftAPDHCPSStatus));
	}

//>Add Readings: Internals - TiSt-Sharing - Block 4 ------------------------------------------------

  if (AffectedReadings & SCDE_R_WSAP_MAC_Adress)

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&WSAP_MAC_Adress=%02X.%02X.%02X.%02X.%02X.%02X.%02X.%02X"
		,WifiSoftAPMACAddr[0]
		,WifiSoftAPMACAddr[1]
		,WifiSoftAPMACAddr[2]
		,WifiSoftAPMACAddr[3]
		,WifiSoftAPMACAddr[4]
		,WifiSoftAPMACAddr[5]
		,WifiSoftAPMACAddr[6]
		,WifiSoftAPMACAddr[7]);

	}

//>Add Readings: Internals - TiSt-Sharing - Block 5 ------------------------------------------------

  if (AffectedReadings & SCDE_R_WSAP)

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&WSAP=%s"
		,SCDE_GetDesc(DisEn, WifiApOpMode));

	}

//>Add Readings: Internals - TiSt-Sharing - Block 6 ------------------------------------------------

  if (AffectedReadings & (SCDE_R_Station_IP_Adress
		| SCDE_R_Station_Netmask
		| SCDE_R_Station_Gateway_Adress) )

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&Station_IP_Adress=%03d.%03d.%03d.%03d"
		 "&Station_Netmask=%03d.%03d.%03d.%03d"
		 "&Station_Gateway_Adress=%03d.%03d.%03d.%03d"
		,STA_ip_info.ip.addr & 0xff
		,(STA_ip_info.ip.addr >> 8) & 0xff
		,(STA_ip_info.ip.addr >> 16) & 0xff
		,STA_ip_info.ip.addr >> 24
		,STA_ip_info.netmask.addr & 0xff
		,(STA_ip_info.netmask.addr >> 8) & 0xff
		,(STA_ip_info.netmask.addr >> 16) & 0xff
		,STA_ip_info.netmask.addr >> 24
		,STA_ip_info.gw.addr & 0xff
		,(STA_ip_info.gw.addr >> 8) & 0xff
		,(STA_ip_info.gw.addr >> 16) & 0xff
		,STA_ip_info.gw.addr >> 24);

	}

//>Add Readings: Internals - TiSt-Sharing - Block 7 ------------------------------------------------

  if (AffectedReadings & SCDE_R_Station)

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&Station=%s"
		,SCDE_GetDesc(DisEn, WifiStaOpMode) );

	}

//>Add Readings: Internals - TiSt-Sharing - Block 8 ------------------------------------------------

  if (AffectedReadings & SCDE_R_Station_DHCP)

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&Station_DHCP=%s"
		,SCDE_GetDesc(DisEn, WifiStationDHCPStatus));

	}

//>Add Readings: Internals - TiSt-Sharing - Block 9 ------------------------------------------------

  if (AffectedReadings & SCDE_R_Station_Auto_Connect)

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&Station_Auto_Connect=%s"
		,SCDE_GetDesc(DisEn, WifiStationAutoConnectStatus));

	}

//>Add Readings: Internals - TiSt-Sharing - Block 10 ------------------------------------------------

  if (AffectedReadings & SCDE_R_Station_Physical_Mode)

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&Station_Physical_Mode=%s"
		,SCDE_GetDesc(PhMode, WifiStationPhyMode));

	}

//>Add Readings: Internals - TiSt-Sharing - Block 11 ------------------------------------------------

  if (AffectedReadings & SCDE_R_Station_MAC_Adress)

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&Station_MAC_Adress=%02X.%02X.%02X.%02X.%02X.%02X.%02X.%02X"
		,WifiStationMACAddr[0]
		,WifiStationMACAddr[1]
		,WifiStationMACAddr[2]
		,WifiStationMACAddr[3]
		,WifiStationMACAddr[4]
		,WifiStationMACAddr[5]
		,WifiStationMACAddr[6]
		,WifiStationMACAddr[7]);

	}

//>Add Readings: Internals - TiSt-Sharing - Block 12 ------------------------------------------------

  if (AffectedReadings & (SCDE_R_TiSt_NTP_Server_Main
		| SCDE_R_TiSt_NTP_Server_Backup_1
		| SCDE_R_TiSt_NTP_Server_Backup_2
		| SCDE_R_TiSt_Time_Zone) )

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&TiSt_NTP_Server_Main=%s"
		 "&TiSt_NTP_Server_Backup_1=%s"
		 "&TiSt_NTP_Server_Backup_2=%s"
		 "&TiSt_Time_Zone=%d"
		,sntp_getservername(0)
		,sntp_getservername(1)
		,sntp_getservername(2)
		,sntp_get_timezone());

	}

//>Add Readings: Readings - TiSt-Sharing - Block 1 ------------------------------------------------

  if (AffectedReadings & (SCDE_R_Station_RSSI
		| SCDE_R_TiSt_Time) )

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&Station_RSSI=%d"
		 "&TiSt_Time=%s"
		,wifi_station_get_rssi()
		,sntp_get_real_time(sntp_get_current_timestamp()));

	}

//>Add Readings: Readings - TiSt-Sharing - Block 2 ------------------------------------------------

  if (AffectedReadings & SCDE_R_Station_RSSI)

	{

	RespArgsWPos += os_sprintf( RespArgsWPos
		,"&SoC_Info=SDKV:%s ChID:%X BootV:%d BootP:%X FlashID:%X"
		 "&Firmware=V %u.%u, Build %u"
		,system_get_sdk_version()
		,system_get_chip_id()
		,system_get_boot_version()
		,system_upgrade_userbin_check()
		,spi_flash_get_id()
		,(unsigned int) SysCfgRamFlashMirrored->Version_major
		,(unsigned int) SysCfgRamFlashMirrored->Version_minor
		,(unsigned int) SysCfgRamFlashMirrored->build);

	}


//>always add Reading - state ----------------------------------------------------------------------

	// are we adding ?
//problem	if (RespArgsWPos != RespArgsBuf) RespArgsWPos += os_sprintf(RespArgsWPos,"&");

/*	// always add state ! on / off
	if ( (SysCfgRamRtcMirrored->MySCDE_FeatCfgRamRtcMirrored_M1[ADID].RB01_RGBPixel[0] == 0) &
		(SysCfgRamRtcMirrored->MySCDE_FeatCfgRamRtcMirrored_M1[ADID].RB01_RGBPixel[1] == 0) &
		(SysCfgRamRtcMirrored->MySCDE_FeatCfgRamRtcMirrored_M1[ADID].RB01_RGBPixel[2] == 0) &
		(SysCfgRamRtcMirrored->MySCDE_FeatCfgRamRtcMirrored_M1[ADID].RB02_WWPixel[0] == 0) &
		(SysCfgRamRtcMirrored->MySCDE_FeatCfgRamRtcMirrored_M1[ADID].RB03_CWPixel[0] == 0) )
		RespArgsWPos += os_sprintf(RespArgsWPos, "state=off");
	else  RespArgsWPos += os_sprintf(RespArgsWPos, "state=on");*/
	RespArgsWPos += os_sprintf(RespArgsWPos, "state=todo");

//--------------------------------------------------------------------------------------------------

  // free allocated memory for query result key-field
  os_free(QueryResultKF);

  // save wirte positions
  *RespArgsWPosX = RespArgsWPos;
//  *HdrFldsWPosX = HdrFldsWPos;
//  *BdyDataWPosX = BdyDataWPos;

  return 0;

  }
