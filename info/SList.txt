       Singly-linked lists
     A singly-linked list is headed by a structure defined by the SLIST_HEAD
     macro.  This structure contains a single pointer to the first element
     on the list.  The elements are singly linked for minimum space and
     pointer manipulation overhead at the expense of O(n) removal for arbi-
     trary elements.  New elements can be added to the list after an exist-
     ing element or at the head of the list.  An SLIST_HEAD structure is
     declared as follows:

           SLIST_HEAD(HEADNAME, TYPE) head;

     where HEADNAME is the name of the structure to be defined, and TYPE is
     the type of the elements to be linked into the list.  A pointer to the
     head of the list can later be declared as:

           struct HEADNAME *headp;

     (The names head and headp are user selectable.)

     The macro SLIST_HEAD_INITIALIZER evaluates to an initializer for the
     list head.

     The macro SLIST_EMPTY evaluates to true if there are no elements in the
     list.

     The macro SLIST_ENTRY declares a structure that connects the elements
     in the list.

     The macro SLIST_FIRST returns the first element in the list or NULL if
     the list is empty.

     The macro SLIST_FOREACH traverses the list referenced by head in the
     forward direction, assigning each element in turn to var.

     The macro SLIST_INIT initializes the list referenced by head.

     The macro SLIST_INSERT_HEAD inserts the new element elm at the head of
     the list.

     The macro SLIST_INSERT_AFTER inserts the new element elm after the ele-
     ment listelm.

     The macro SLIST_NEXT returns the next element in the list.

     The macro SLIST_REMOVE_HEAD removes the element elm from the head of
     the list.  For optimum efficiency, elements being removed from the head
     of the list should explicitly use this macro instead of the generic
     SLIST_REMOVE macro.

     The macro SLIST_REMOVE removes the element elm from the list.

   Singly-linked list example
     SLIST_HEAD(slisthead, entry) head =
         SLIST_HEAD_INITIALIZER(head);
     struct slisthead *headp;                /* Singly-linked List
                                                head. */
     struct entry {
             ...
             SLIST_ENTRY(entry) entries;     /* Singly-linked List. */
             ...
     } *n1, *n2, *n3, *np;

     SLIST_INIT(&head);                      /* Initialize the list. */

     n1 = malloc(sizeof(struct entry));      /* Insert at the head. */
     SLIST_INSERT_HEAD(&head, n1, entries);

     n2 = malloc(sizeof(struct entry));      /* Insert after. */
     SLIST_INSERT_AFTER(n1, n2, entries);

     SLIST_REMOVE(&head, n2, entry, entries);/* Deletion. */
     free(n2);

     n3 = SLIST_FIRST(&head);
     SLIST_REMOVE_HEAD(&head, entries);      /* Deletion from the head. */
     free(n3);
                                             /* Forward traversal. */
     SLIST_FOREACH(np, &head, entries)
             np-> ...

     while (!SLIST_EMPTY(&head)) {           /* List Deletion. */
             n1 = SLIST_FIRST(&head);
             SLIST_REMOVE_HEAD(&head, entries);
             free(n1);
     }
